{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JOY\\\\Desktop\\\\ultimate-react-course-main (1)\\\\ultimate-react-course-main\\\\12-atomic-blog\\\\starter\\\\src\\\\PostContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext } from \"react\";\nimport { faker } from \"@faker-js/faker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostContext = /*#__PURE__*/createContext();\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase()\n  };\n}\nfunction PostProvider() {\n  _s();\n  //RETURNS    A CONTEXT it is a component\n  const [posts, setPosts] = useState(() => Array.from({\n    length: 30\n  }, () => createRandomPost()));\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Derived state. These are the posts that will actually be displayed\n  const searchedPosts = searchQuery.length > 0 ? posts.filter(post => `${post.title} ${post.body}`.toLowerCase().includes(searchQuery.toLowerCase())) : posts;\n  function handleAddPost(post) {\n    setPosts(posts => [post, ...posts]);\n  }\n  function handleClearPosts() {\n    setPosts([]);\n  }\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: searchedPosts,\n      onClearPosts: handleClearPosts,\n      searchQuery,\n      setSearchQuery,\n      onAddPost: handleAddPost\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(PostProvider, \"IIgvfwXtAm3eXUr7HRsVYhSvhoQ=\");\n_c = PostProvider;\nexport default {\n  PostProvider\n};\nvar _c;\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","faker","jsxDEV","_jsxDEV","PostContext","createRandomPost","title","hacker","adjective","noun","body","phrase","PostProvider","_s","posts","setPosts","Array","from","length","searchQuery","setSearchQuery","searchedPosts","filter","post","toLowerCase","includes","handleAddPost","handleClearPosts","Provider","value","onClearPosts","onAddPost","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/JOY/Desktop/ultimate-react-course-main (1)/ultimate-react-course-main/12-atomic-blog/starter/src/PostContext.js"],"sourcesContent":["import { createContext,useState,useEffect,useContext } from \"react\";\r\nimport { faker } from \"@faker-js/faker\";\r\n\r\nconst PostContext=createContext();\r\nfunction createRandomPost() {\r\n  return {\r\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\r\n    body: faker.hacker.phrase(),\r\n  };\r\n}\r\nfunction PostProvider(){\r\n   //RETURNS    A CONTEXT it is a component\r\nconst [posts, setPosts] = useState(() =>\r\n    Array.from({ length: 30 }, () => createRandomPost())\r\n  );\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  // Derived state. These are the posts that will actually be displayed\r\n  const searchedPosts =\r\n    searchQuery.length > 0\r\n      ? posts.filter((post) =>\r\n          `${post.title} ${post.body}`\r\n            .toLowerCase()\r\n            .includes(searchQuery.toLowerCase())\r\n        )\r\n      : posts;\r\n\r\n  function handleAddPost(post) {\r\n    setPosts((posts) => [post, ...posts]);\r\n  }\r\n\r\n  function handleClearPosts() {\r\n    setPosts([]);\r\n  }\r\n  return(\r\n    <PostContext.Provider \r\n    value={{posts:searchedPosts,\r\n    onClearPosts:handleClearPosts,\r\n    searchQuery,\r\n    setSearchQuery,onAddPost:handleAddPost\r\n    }}></PostContext.Provider>\r\n  )\r\n}\r\n\r\nexport default {PostProvider};"],"mappings":";;AAAA,SAASA,aAAa,EAACC,QAAQ,EAACC,SAAS,EAACC,UAAU,QAAQ,OAAO;AACnE,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,gBAACP,aAAa,CAAC,CAAC;AACjC,SAASQ,gBAAgBA,CAAA,EAAG;EAC1B,OAAO;IACLC,KAAK,EAAE,GAAGL,KAAK,CAACM,MAAM,CAACC,SAAS,CAAC,CAAC,IAAIP,KAAK,CAACM,MAAM,CAACE,IAAI,CAAC,CAAC,EAAE;IAC3DC,IAAI,EAAET,KAAK,CAACM,MAAM,CAACI,MAAM,CAAC;EAC5B,CAAC;AACH;AACA,SAASC,YAAYA,CAAA,EAAE;EAAAC,EAAA;EACpB;EACH,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,MAC/BkB,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,MAAMb,gBAAgB,CAAC,CAAC,CACrD,CAAC;EACD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMuB,aAAa,GACjBF,WAAW,CAACD,MAAM,GAAG,CAAC,GAClBJ,KAAK,CAACQ,MAAM,CAAEC,IAAI,IAChB,GAAGA,IAAI,CAACjB,KAAK,IAAIiB,IAAI,CAACb,IAAI,EAAE,CACzBc,WAAW,CAAC,CAAC,CACbC,QAAQ,CAACN,WAAW,CAACK,WAAW,CAAC,CAAC,CACvC,CAAC,GACDV,KAAK;EAEX,SAASY,aAAaA,CAACH,IAAI,EAAE;IAC3BR,QAAQ,CAAED,KAAK,IAAK,CAACS,IAAI,EAAE,GAAGT,KAAK,CAAC,CAAC;EACvC;EAEA,SAASa,gBAAgBA,CAAA,EAAG;IAC1BZ,QAAQ,CAAC,EAAE,CAAC;EACd;EACA,oBACEZ,OAAA,CAACC,WAAW,CAACwB,QAAQ;IACrBC,KAAK,EAAE;MAACf,KAAK,EAACO,aAAa;MAC3BS,YAAY,EAACH,gBAAgB;MAC7BR,WAAW;MACXC,cAAc;MAACW,SAAS,EAACL;IACzB;EAAE;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAE9B;AAACtB,EAAA,CAhCQD,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAkCrB,eAAe;EAACA;AAAY,CAAC;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}